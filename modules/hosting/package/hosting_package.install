<?php
// $Id: hosting_package.install,v 1.17 2009/11/11 23:51:58 adrian Exp $

/**
 * Implementation of hook_schema().
 */
function hosting_package_schema() {
  $schema['hosting_package'] = array(
    'fields' => array(
      'vid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'package_type' => array(
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => '',
      ),
      'short_name' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('vid'),
  );

  $schema['hosting_package_instance'] = array(
    'fields' => array(
      'iid' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'rid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'package_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'filename' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'default' => '',
      ),
      'schema_version' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'version' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'default' => '',
      ),
      'version_code' => array(
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('iid'),
  );

  $schema['hosting_package_languages'] = array(
    'fields' => array(
      'iid' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
  );

  return $schema;
}

function hosting_package_install() {
  // Create tables.
  drupal_install_schema('hosting_package');
}

/**
 * Add package description to hosting_package table
 */
function hosting_package_update_1() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {hosting_package} ADD COLUMN description longtext NOT NULL default ''");
  return $ret;
}

/**
 * Add localization support for installed sites
 */
function hosting_package_update_2() {
  $ret = array();
  $ret[] = update_sql("CREATE TABLE {hosting_package_languages} (
    vid int NOT NULL,
    nid int(10) UNSIGNED NOT NULL,
    language VARCHAR(12) NOT NULL DEFAULT ''
  )  /*!40100 DEFAULT CHARACTER SET UTF8 */");
  return $ret;
}


/**
 * No limit on short_name length 
 */
function hosting_package_update_3() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {hosting_package} MODIFY COLUMN short_name longtext NOT NULL default ''");
  return $ret;
}

/**
 * Package languages are associated to package instances, not packages
 */
function hosting_package_update_4() {
  include_once(drupal_get_path('module', 'hosting_task') . '/hosting_task.module');
  $ret = array();
  $ret[] = update_sql("DROP TABLE {hosting_package_languages}");
  $ret[] = update_sql("CREATE TABLE {hosting_package_languages} (
    iid int UNSIGNED NOT NULL,
    language VARCHAR(12) NOT NULL DEFAULT ''
  )  /*!40100 DEFAULT CHARACTER SET UTF8 */");

  // Re-verify all existing platforms
  $result = db_query("SELECT nid FROM {node} WHERE type='platform' AND status=1");
  while ($platform = db_fetch_object($result)) {
    hosting_add_task($platform->nid, 'verify');
  }
  return $ret;
}

/**
 * Denormalize package and package release node types
 */
function hosting_package_update_5() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {hosting_package_instance} ADD COLUMN package_id int(10) NOT NULL default '0'");
  $ret[] = update_sql("ALTER TABLE {hosting_package_instance} ADD COLUMN version longtext NOT NULL default ''");
  $ret[] = update_sql("ALTER TABLE {hosting_package_instance} ADD COLUMN filename longtext NOT NULL default ''");
  $ret[] = update_sql("ALTER TABLE {hosting_package_instance} ADD COLUMN schema_version int(10) NOT NULL default '0'");
  $ret[] = update_sql("ALTER TABLE {hosting_package_instance} ADD COLUMN status int(1) NOT NULL default '0'");

  // Now we replace the release ID of platform node types with instance types.
  // This needs to be done from the package module, even though it modifies the
  // hosting_platform table, so we can be _SURE_ that the order of execution is correct.
  $platforms = _hosting_get_platforms();
  foreach ($platforms as $nid => $name) {
    $platform = db_fetch_object(db_query("SELECT release_id FROM {hosting_platform} WHERE nid=%d", $nid));
    $release = db_fetch_object(db_query("SELECT * FROM {hosting_package_release} WHERE nid = %d", 
      $platform->release_id));

    $instance = new stdClass();
    $instance->rid = $nid;
    $instance->package_id = $release->package;
    $instance->version = $release->version;

    // A future step will fill these in from the packages.
    $instance->filename = '';
    $instance->schema_version = 0;
    
    hosting_package_instance_save($instance);
    hosting_add_task($nid, 'verify');
  }

  $ret[] = update_sql("ALTER TABLE {hosting_platform} DROP COLUMN release_id");

  // Now we iterate through all the package
  $result = db_query("SELECT * FROM {hosting_package_release}");
  while ($release = db_fetch_object($result)) {
    db_query("UPDATE {hosting_package_instance} SET version='%s', schema_version=%d, package_id=%d WHERE release_id=%d", $release->version, $release->schema_version, $release->package, $release->nid);
  }

  $ret[] = update_sql("DELETE FROM {node_revisions} WHERE nid IN (SELECT nid FROM {node} WHERE type='package_release')");
  $ret[] = update_sql("DELETE FROM {node} WHERE type='package_release'");
  $ret[] = update_sql("ALTER TABLE {hosting_package_instance} DROP COLUMN release_id");
  $ret[] = update_sql("ALTER TABLE {hosting_package_instance} DROP COLUMN path");
  $ret[] = update_sql("DROP TABLE {hosting_package_release}");
  return $ret;
}

// Rebuild the package instance database and re-verify all sites.
function hosting_package_update_6() {
  $ret = array();
  $ret[] = update_sql("DELETE FROM {hosting_package_instance}");
  $ret[] = update_sql("UPDATE {sequences} SET id=1 WHERE name='{hosting_package_instance}_iid'");
  $result = db_query("SELECT nid FROM {node} WHERE type='platform' AND status=1");
  while ($platform = db_fetch_object($result)) {
    hosting_add_task($platform->nid, 'verify');
  }
  $result = db_query("SELECT nid FROM {node} WHERE type='site' AND status=1");
  while ($site = db_fetch_object($result)) {
    hosting_add_task($site->nid, 'verify');
  }
  return $ret;
}

/**
 * Turn the iid column of hosting_package_instance into a serial field
 *
 * Required by Drupal 6 update.
 */
function hosting_package_update_7() {
  $ret = array();


  db_drop_primary_key($ret, 'hosting_package_instance');
  db_field_set_no_default($ret, 'hosting_package_instance', 'iid');
  db_change_field($ret, 'hosting_package_instance', 'iid', 'iid',
    array('type' => 'serial', 'not null' => TRUE),
    array('primary key' => array('iid')));

  return $ret;
}

function hosting_package_update_8() {
  include_once(drupal_get_path('module', 'hosting_package') . '/hosting_package.instance.inc');
  $ret = array();
  db_add_field($ret, 'hosting_package_instance', 'version_code', array(
      'type' => 'int',
      'size' => 'big',
      'not null' => TRUE,
      'default' => 0,
    ));

  // The contents of update 9 was originally inside this function, 
  // but due to an error in the regular expression the code needs to be
  // executed again, as such it has been moved.

  return $ret;
}


/**
 * Regenerate the package version codes to fix a error related to the regular expression
 */
function hosting_package_update_9() {
  $ret = array();

  // This code was originally in update 8, but was moved here to avoid people executing the same functionality
  // twice.
  $result = db_query("SELECT iid, version FROM {hosting_package_instance}");
  while ($obj = db_fetch_object($result)) {
    $code = hosting_package_instance_version_code($obj->version);
    db_query("UPDATE {hosting_package_instance} SET version_code = %f WHERE iid = %d", $code, $obj->iid);
  }

  return $ret;
}

// Re-verify all platforms and sites
function hosting_package_update_10() {
  /**
   * This update is no longer necessary as all platforms and sites are re-verified in later updates.
   * because the module weight of hosting_package is lower than hosting_site, creating verify tasks
   * at this point would break the upgrade process because it would attempt to re-create the node access
   * rules, which would in turn try to load the node with it's schema not yet updated.
   *
   * we can safely remove this because we re-verify everything in hosting_update_6000()
   */
  // the task database schema needs to be changed before hosting_add_task will work.
  $ret = hosting_task_update_6000();

  return $ret;
}

// Remove duplicate packages introduced by a double validation of the main platform in 0.4 alpha 1. See #584188
function hosting_package_update_6001() {
  // the task database schema needs to be changed before hosting_add_task will work.

  $ret = hosting_task_update_6000();

  // There appear to be two types of duplication that can be encountered. So we try and find traces of either here
  $duplicate = array();
  $result = db_query("SELECT DISTINCT(package_id) FROM {hosting_package_instance} GROUP BY rid, filename HAVING count(*) > 1 ORDER BY package_id;");
  while ($instance = db_fetch_array($result)) {
    $duplicate[$instance['package_id']] = $instance['package_id'];
  }
  $result = db_query("SELECT nid FROM {hosting_package} WHERE nid NOT IN (SELECT package_id FROM {hosting_package_instance});");
  while ($package = db_fetch_array($result)) {
    $duplicate[$package['nid']] = $package['nid'];
  }

  // We'll only actually execute this fix if duplicates were found (i.e users upgrading from 0.3 should never encounter this)
  if (count($duplicate)) {
    foreach ($duplicate as $nid) {
      $ret[] = array('success' => TRUE, 'query' => "Delete package ". $nid);
      node_delete($nid);
    }
    // Schedule re-verify of all existing platforms
    $result = db_query("SELECT nid FROM {node} WHERE type='platform' AND status=1");
    while ($platform = db_fetch_object($result)) {
      $ret[] = array('success' => TRUE, 'query' => "Re-verify scheduled for platform ". $platform->nid);
      hosting_add_task($platform->nid, 'verify');
    }
  }

  return $ret;
}

