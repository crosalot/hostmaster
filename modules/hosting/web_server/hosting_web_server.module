<?php
/**
 * @file Web server node type is defined here.
 */

/**
 * Implementation of hook_hosting_service()
 *
 * @see hosting_help_requirements()
 */
function hosting_web_server_hosting_service() {
  return array( "web_server" => t("Web Server"));
}

/**
 * Implementation of hook_help().
 *
 * @see _hosting_requirements()
 * @see hosting_help_requirements()
 */
function hosting_web_server_help($path, $arg) {
  switch ($path) {
    case 'admin/help/provision#requirements':
      $output .= _hosting_requirements('drush_path');
      $output .= _hosting_requirements('config_path');
      $output .= _hosting_requirements('httpd_conf');
      $output .= _hosting_requirements('visudo');
      $output .= _hosting_requirements('ports');
      return $output;
      break;
  }
}

function _hosting_config_path_requirements() {
  $username = HOSTING_DEFAULT_SCRIPT_USER;
  $group = HOSTING_DEFAULT_WEB_GROUP;
  $vhost_path = HOSTING_DEFAULT_CONFIG_PATH;
  $mkdir_cmd['@vhost_path'] = $vhost_path;
  $mkdir_cmd['@mkdir_cmd'] = <<<EOF
    mkdir -p $vhost_path
    chown $username:$username $vhost_path
    chmod 0711 $vhost_path
EOF;

  $help['title'] = t('Write access to a directory to store configuration information');
  $help['summary'] = t('The Provision framework takes special care to make sure that the file permissions of the 
                       hosted sites are always as safe as can be, especially to make sure that the web server does 
                       not have the ability to modify the code of the site, therefore this information is required 
                       to assure that safety while keeping the sites accessible. 
                       The recommended path is directly above your platform path, but it can be anywhere.');

  $help['configuration'][] = t('Based on your server configuration we have determined that your path should be <code>@vhost_path</code>.', $mkdir_cmd);
  $help['configuration'][] = t(' please enter the following commands : <pre>@mkdir_cmd</pre>', $mkdir_cmd);

  return $help;
}

function _hosting_drush_path_requirements() {
  $help['title'] = t('Full path to the Drush script on this server.');
  $help['summary'] = t('<a href="http://drupal.org/project/drush">Drush</a> is a command line script that is used to
                       interact with Drupal sites through the unix shell.<br />
                       To be able to use Aegir, you need to download Drush, and place it somewhere on your server
                       that is accessible by the script user (eg: <code>!parent_path/drush/drush.php</code>).<br />
                       Once Drush is installed, you are required to download <a href="http://drupal.org/project/provision">Provision</a>
                       and place it in the .drush folder of the script user\'s home directory.
                       (eg: <code>!parent_path/.drush/provision</code>).<br />', 
                       array('!parent_path' => HOSTING_DEFAULT_PARENT_PATH));

  return $help;
}


function _hosting_httpd_conf_requirements() {
  $vhost_path = HOSTING_DEFAULT_VHOST_PATH;
  $vhost_line = <<<EOF
    Include $vhost_path
EOF;
  $help['title'] = t('Modify the web server\'s configuration file');
  $help['summary'] = t('To allow the system to load additional virtual hosts that are generated,
			you are required to add a line to your Apache configuration.</p>
			If you followed the instructions in the hostmaster INSTALL.txt prior to
			starting this wizard, you will already have placed a file into
			<code>/etc/apache2/conf.d/</code>, in which case you can skip this step.
			If you have not yet done this, or this option is not available due to your 
			Apache configuration differing based on your distribution, put this configuration 
			change in the relevant configuration file.
			The location of this file differs between distributions, but is most commonly
			found in <code>/etc/httpd</code>, <code>/etc/apache</code> or <code>/etc/apache2</code>.
			It may be called <code>apache2.conf</code> or <code>httpd.conf</code>.');

  $help['configuration'] = t('Once you have determined the location of your configuration file, add the following line to it:
                            <pre>@vhost_line</pre>', array('@vhost_line' => $vhost_line));

  return $help;
}

function _hosting_visudo_requirements() {
  $username = HOSTING_DEFAULT_SCRIPT_USER;
  $cmd = trim(str_replace("sudo", '', HOSTING_DEFAULT_RESTART_CMD));
  $cmd = substr($cmd, 0, strpos($cmd, " "));
  $visudo_cmd['@visudo_cmd'] = <<<EOF
    sudo visudo
EOF;
  $visudo_cmd['@visudo_line'] = <<<EOF
    $username ALL=NOPASSWD: $cmd
EOF;

  $help['title'] = t('Permission to restart the web server');
  $help['summary'] = t('As the provisioning framework should not be run as root,
                         and the web server group should not be allowed access to the 
                         functionality to stop/start the web server, it is required that you provide access
                         to the Apache restart command for the user account the script will be running as. 
                         If this is not configured, every command will ask for a sudo password when restarting the server.');
  $help['configuration'] = t('Run the visudo command: <pre>@visudo_cmd</pre>
                             Then add the following line to the file: <pre>@visudo_line</pre>', 
                             $visudo_cmd);
  return $help;

}

function _hosting_ports_requirements() {
   $help['title'] = t('Web server ports');
   $help['summary'] = t('If the web server is to serve sites on ports other than just 80,
                         you may add those other ports here, separated by a comma. Later,
                         during the provisioning of sites, you may choose which port to
                         serve the site on.');
   return $help;
}

function hosting_web_server_node_info() {
  $types["web_server"] =  array(
    "type" => 'web_server', "name" => 'Web server',
    "module" => 'hosting_web_server',
    "has_title" => true, "title_label" => t('Host name'), 
    "description" => hosting_node_help("web_server"),
    "has_body" => 0, "body_label" => '', "min_word_count" => 0);
  return $types;
}

/**
 * "Feature" definition
 *
 * @see hosting.features.inc
 */
function hosting_web_server_hosting_feature() {
  $features['web_server'] = array(
      'title' => t('Web servers'), 
      'description' => t('Allow for creation of multiple web server nodes, and for distributed management of sites.'),
      'status' => HOSTING_FEATURE_DISABLED,
      'node' => 'web_server',
    'group' => 'experimental');
  $features['ports'] = array(
      'title' => t('Ports'),
      'description' => t('Allow configuration of multiple ports per server and non-default ports for sites.'),
      'status' => HOSTING_FEATURE_ENABLED,
  );
  return $features;
}

/**
 * Implementation of hook_perm()
 */
function hosting_web_server_perm() {
  return array('create web server', 'view web server', 'edit web server', 'delete web server');
}

/**
 * Implementation of hook_access()
 */
function hosting_web_server_access($op, $node, $account) {
  if (!hosting_feature('web_server')) {
    return FALSE;
  }
  switch ($op) {
    case 'create':
      return user_access('create web server', $account);
      break;
    case 'view':
      return user_access('view web server', $account);
      break;
    case 'update':
      return user_access('edit web server', $account);
      break;
    case 'delete':
      return user_access('delete web server', $account);
      break;
    default:
      break;
  }
}

/**
 * Small helper function to get web servers.
 *
 * @return array pairs of nid -> title of enabled webservers
 */ 
function _hosting_get_web_servers() {
  $return = array();
  $result = db_query("SELECT nid, title FROM {node} WHERE type='web_server' AND status=1");
  while($server = db_fetch_object($result)) {
    $return[$server->nid] = $server->title;
  }
  return $return;
}

/**
 * Implementation of hook_form().
 */
function hosting_web_server_form(&$node) {
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Web server hostname'),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#description' => t('The host name of the server. This is the address that will be used by Hostmaster to connect to the web server to issue commands.<br /><strong>Be careful when changing the node title, it is used to create the SQL users if the IP address, below, is not set.</strong>'),
    '#weight' => -10
  );

  #TODO : rename to db_ip_address, to avoid confusion
  $form['ip_address'] = array(
    '#type' => 'textfield',
    '#title' => t('IP address'),
    '#default_value' => $node->ip_address,
    '#size' => 15,
    '#maxlength' => 15,
    '#description' => t("The IP address the server can be accessed by. This will be used to create database grants, amongst other things.<br />If this is empty, Hostmaster will attempt to resolve the hostname to get the address.<br />If that fails, the hostname (ie. the node title) will be used instead."),
    '#weight' => -9
  );

  $form['drush_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Drush path'),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => ($node->drush_path) ? $node->drush_path : HOSTING_DEFAULT_PARENT_PATH.'/drush/drush.php',
    '#description' => t("The full path to the drush.php script on this server."),
    '#maxlength' => 255,
    '#weight' => -8,
  );

  if (hosting_feature('ports') == HOSTING_FEATURE_ENABLED) {
    $form['ports'] = array(
      '#type' => 'textfield',
      '#title' => t('Ports'),
      '#required' => TRUE,
      '#size' => 40,
      '#default_value' => ($node->ports) ? $node->ports : '80',
      '#description' => t("All the ports enabled on this server, comma separated. Port 80 is the default http, 443 is https."),
      '#maxlength' => 255,
      '#weight' => -8,
    );
  } else {
    $form['ports'] = array(
      '#type' => 'value',
      '#value' => '80',
    );
  }
  
  $form['restart_cmd'] = array(
      '#type' => 'textfield',
      '#title' => t('Restart command'),
      '#required' => TRUE,
      '#description' => t('The command to run to restart the web server for new changes to take effect. This is required for the new site to become live'),
      '#default_value' => ($node->restart_cmd) ? $node->restart_cmd : HOSTING_DEFAULT_RESTART_CMD,
      '#size' => 40,
      '#maxlength' => 255,
      '#weight' => -7,
  );

  $form['script_user'] = array(
    '#type' => 'textfield',
    '#title' => t('System account'),
    '#required' => TRUE,
    '#description' => t('The system account that the hosted files will belong to, for security reasons.<br />This should be a different account to the account the web server is running as.'),
    '#default_value' => ($node->script_user) ? $node->script_user : HOSTING_DEFAULT_SCRIPT_USER,
    '#size' => 20,
    '#maxlength' => 255,
    '#weight' => -6,
  );
   
  $form['web_group'] = array(
    '#type' => 'textfield',
    '#title' => t('Web server group'),
    '#required' => TRUE,
    '#description' => t('The group that the hosted files will belong to.<br />This should be the group the web server is running as.'),
    '#default_value' => ($node->web_group) ? $node->web_group : HOSTING_DEFAULT_WEB_GROUP,
    '#size' => 20,
    '#maxlength' => 75,
    '#weight' => -5,
  );
  
  $form['config_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Configuration path'),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => ($node->config_path) ? $node->config_path : HOSTING_DEFAULT_CONFIG_PATH,
    '#description' => t("The path on the server where configuration files will be stored.<br />
        It is essential that this directory should not be accessible via a web browser."),
    '#maxlength' => 255,
    '#weight' => -4,
  );
  
  $form['backup_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Backup path'),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => ($node->backup_path) ? $node->backup_path : HOSTING_DEFAULT_BACKUP_PATH,
    '#description' => t("The path on the server where backups will be stored.<br />
        It is essential that this directory should not be accessible via a web browser."),
    '#maxlength' => 255,
    '#weight' => -3,
  );
  

  return $form;
}

function hosting_nodeapi_web_server_presave(&$node) {

  if (!$node->ip_address) {
    $ip = gethostbyname($node->title);

    // setup IP only if resolution succeeded
    if ($ip != $node->title) {
      $node->ip_address = $ip; // required to fool the ip check below
      drupal_set_message(t('Initialized the webserver IP to %ip based on hostname %name. This will be used to create database grants so make sure it is the right address, as seen from the database server.', array('%ip' => $ip, '%name' => $node->title)), 'message');
    } else {
      form_set_error('title', t('Could not resolve IP address of webserver %name. Either set the web server name to a FQDN (Fully Qualified Domain Name) or hardcode the IP here.', array('%name' => $node->title)));
    }
  }

}

/**
 * Implementation of hook_validate().
  */
function hosting_web_server_validate(&$node, &$form) {
  if (!_hosting_valid_fqdn($node->title)) {
    form_set_error('title', t('Invalid valid domain name. Either choose a proper domain name or hardcode the IP address of the webserver.'));
  }
  $ports = explode(",", $node->ports);
  if (count($ports) < 1) {
    form_set_error('ports', t('At least one port must be provided.'));
  }
  foreach($ports as $port) {
    if ($port < 1) {
      form_set_error('ports', t('Invalid port specified'));
    }
  }
  
  if ($node->script_user == 'root') {
    form_set_error('script_user', t('For security reasons, you should not run drush commands as the root user. Please choose a different system account name.'));
  }
  if ($node->ip_address) {
    if (!_hosting_valid_ip($node->ip_address)) {
      form_set_error('ip_address', t('Invalid IP address'));
    }
  }
}

/**
 * Implementation of hook_insert().
 */
function hosting_web_server_insert($node) {
  print_r($form);
  db_query("INSERT INTO {hosting_web_server} (vid, nid, ip_address, script_user, web_group, config_path, backup_path, restart_cmd, drush_path, ports) 
      VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')", 
        $node->vid, $node->nid, $node->ip_address, $node->script_user, $node->web_group, $node->config_path, $node->backup_path, $node->restart_cmd, $node->drush_path, $node->ports);
}

/**
 * Implementation of hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 *
 * This will fire up a verify task if the webserver ports have changed.
 */
function hosting_web_server_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    hosting_web_server_insert($node);
  }
  else {
    $oldports = db_result(db_query("SELECT ports FROM {hosting_web_server} WHERE vid = %d", $node->vid));
    if ($oldports != $node->ports) {
      $query = db_query("SELECT nid FROM {hosting_platform} WHERE web_server = %d", $node->nid);
      while($nid = db_fetch_object($query)) {
        hosting_add_task($nid->nid, 'verify');
      }
    }
    db_query("UPDATE {hosting_web_server} SET 
                  ip_address = '%s', script_user = '%s', web_group = '%s', 
                  config_path = '%s', backup_path = '%s', restart_cmd = '%s',
                  drush_path = '%s', ports = '%s'
              WHERE 
                  vid = %d", 
                  $node->ip_address, $node->script_user, $node->web_group,
                  $node->config_path, $node->backup_path, $node->restart_cmd, 
                  $node->drush_path, $node->ports,
                  $node->vid);
  }
}

/**
 * Implementation of hook_delete_revision().
 */
function hosting_nodeapi_web_server_delete_revision(&$node) {
  db_query('DELETE FROM {hosting_web_server} WHERE vid = %d', $node->vid);
}

/**
 * Implementation of hook_delete().
 */
function hosting_web_server_delete($node) {
  db_query('DELETE FROM {hosting_web_server} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function hosting_web_server_load($node) {
  $additions = db_fetch_object(db_query('SELECT ip_address, script_user, web_group, config_path, backup_path, restart_cmd, drush_path, ports FROM {hosting_web_server} WHERE vid = %d', $node->vid));
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function hosting_web_server_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  $node->content['info'] = array(
    '#prefix' => '<div id="hosting-webserver-info">',
    '#suffix' => '</div>'
  );
  if ($node->ip_address) {
    $node->content['info']['ip_address'] = array(
      '#type' => 'item',
      '#title' => t('IP address'),
      '#value' => filter_xss($node->ip_address),
    );    
  }
  $node->content['info']['drush_path'] = array(
    '#type' => 'item',
    '#title' => t('Drush path'),
    '#value' => filter_xss($node->drush_path),
  );
  if (hosting_feature('ports') == HOSTING_FEATURE_ENABLED) {
    $node->content['info']['ports'] = array(
      '#type' => 'item',
      '#title' => t('Ports'),
      '#value' => $node->ports,
    );
  }
  $node->content['info']['script_user'] = array(
    '#type' => 'item',
    '#title' => t('Script user'),
    '#value' => filter_xss($node->script_user),
  );
  $node->content['info']['web_group'] = array(
    '#type' => 'item',
    '#title' => t('Web server group'),
    '#value' => filter_xss($node->web_group),
  );
  $node->content['info']['config_path'] = array(
    '#type' => 'item',
    '#title' => t('Configuration path'),
    '#value' => filter_xss($node->config_path),
  );
  $node->content['info']['backup_path'] = array(
    '#type' => 'item',
    '#title' => t('Backup path'),
    '#value' => filter_xss($node->backup_path),
  );
   $node->content['info']['restart_cmd'] = array(
    '#type' => 'item',
    '#title' => t('Restart command'),
    '#value' => filter_xss($node->restart_cmd),
  );
  
  return $node;
}

/**
 * Implementation of hook_hosting_summary().
 */
function hosting_web_server_hosting_summary() {
  $summary = array();
  $web_servers = _hosting_get_web_servers();
  $summary['web_servers'] = theme('item_list', array_map('_hosting_node_link', array_keys($web_servers)), t('Web servers'));
  return $summary;
}

/**
 * Implementation of hook_form_alter()
 *
 * This makes sure we have a proper IP address defined for the webserver. It
 * will change the IP address field only if:
 *
 * 1. it is not already set, and;
 * 2. if it resolves properly
 */
function hosting_web_server_form_alter($form_id, &$form) {
  switch ($form_id) {
    case 'web_server_node_form':
      if ($form['#post']['op'] == 'Preview' && !$form['#post']['ip_address']) {
        $ip = gethostbyname($form['#post']['title']);
        // setup IP only if resolution succeeded
        if ($ip != $node->title) {
          drupal_set_message(t('Initialized the webserver IP to %ip based on hostname %name', array('%ip' => $ip, '%name' => $form['#post']['title'])), 'message');
          $form['#post']['ip_address'] = $ip;
        }
      }
      break;
  }
}
